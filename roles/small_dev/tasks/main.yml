---
# TODO merge this and big_dev into "cli"?
# For RPI or ARMS, I can just exclude things.
#
# TODO make this nice for two repos
# TODO have the list of common ones and the specific ones
#
- name: install programs
  package:
    name: '{{ item }}'
    state: latest
  with_items:
  - cmake
  - curl
  - entr # running commands on file changes
  - expect # needed for unbuffer tool used in ranger config creation hack
  - fd
  - fish
  - fzf
  - git
  - highlight # syntax coloring in ranger file preview
  # for compiling stuff like cryptography for different Python versions
  - neovim
  - nmap
  # TODO this is something different on Arch than on Debian
  - python-pip
  - sipcalc # IP address / CIDR calculator
  - sshpass # so that Ansible can log in using password (needed in RPi configuration)
  - ranger
  - tmux
  - tree
  - wrk
  - xclip # for tmux-yank
  - xsel # for ranger file-path copying
  become: true

- name: install Debian programs
  when: ansible_facts['os_family'] == 'Debian'
  package:
    name: '{{ item }}'
    state: latest
  with_items:
  - apt-file

# TODO install yay for arch
# https://ansible-tips-and-tricks.readthedocs.io/en/latest/os-dependent-tasks/installing_packages/#installing-packages
# https://ansible-tips-and-tricks.readthedocs.io/en/latest/os-dependent-tasks/variables/
# jak wyżej, ale w osobnych plikach przygotować wszystkie repa dla ubuntu i archa,
# potem jeden task instalujący. Dla Archa managerem niech będzie yay.
# Jest moduł do yay? Może do tego pythonowego? Trzeba mieć dla niego użytkownika?
# A może zbudować wszystkie paczki osobno, a jako nazwy pakietów dla archa mieć ścieżki do
# zbudowanych aurów?
# Nadal mieć listę dictów z jednym źródłem paczek. Od razu będzie widzieć co idzie na jaki system.
# Ta lista normalnie w with_items


# https://serverfault.com/questions/587727/how-to-unify-package-installation-tasks-in-ansible
# TODO packages needed both places (make it as a mapping mapping:
# deps:[
#   {
#     arch: name
#     debian: name
#   },
# ]
# the_silver_searcher, debian: silversearcher-ag
# available on debian
#  libssl-dev
#  python3-pip
#  python3-dev
#  python3-venv
#  python-dev
#  wrk

- name: install python tools
  pip:
    name: "{{ item }}"
    executable: pip3
    state: latest
    extra_args: --user
  with_items:
  - cookiecutter
  - httpie
  - pgcli  # postgres client
  - ptpython
  - pudb
  - subliminal
  - tox
  - virtualenvwrapper
  - virtualfish
    # for ranger image preview
  - ueberzug # TODO remove w3m

- name: setup tmux plugins
  git:
    repo: https://github.com/tmux-plugins/{{ item }}
    dest: '{{ ansible_user_dir }}/.tmux/plugins/{{ item }}'
  with_items:
    - tpm
    - tmux-yank


- name: create the development folder
  file: path={{ item }} state=directory
  with_items:
  - "{{ ansible_user_dir }}/development"

# TODO is there something built into nvim?
- name: install vim plugin manager
  git:
    repo: https://github.com/VundleVim/Vundle.vim.git
    dest: "{{ ansible_user_dir }}/.vim/bundle/Vundle.vim"

- name: download darcula colorsheme for vim
  get_url:
    url: https://raw.githubusercontent.com/blueshirts/darcula/master/colors/darcula.vim
    dest: "{{ ansible_user_dir }}/.vim/colors/darcula.vim"
    mode: 0644

# TODO check when this changes
- name: install vim plugins
  command: nvim +PluginInstall +qall

# TODO run this only when plugin install did something, or after a plugin update
- name: compile and install YouComplete me for Vim
  command: ./install.py --clang-completer
  args: 
    chdir: "{{ ansible_user_dir }}/.vim/bundle/YouCompleteMe"

# TODO make that required, but learn about rolling back on Manjaro.
- name: setup auto-updates
  become: true
  copy:
    src: auto-upgrade
    dest: /etc/cron.daily
    mode: "u=rwx,g=rx,o=rx"
