---
- name: detect default server user
  local_action: shell sshpass -p raspberry ssh pi@{{ inventory_hostname }} "echo connected..."
  register: pi_user_exists
  ignore_errors: true
  become: false

- name: create server user
  when: pi_user_exists.rc == 0
  user:
    name: "{{ server_user }}"
    groups: pi,adm,dialout,cdrom,sudo,audio,video,plugdev,games,users,input,netdev,gpio,i2c,spi
    password: "{{ server_user_password }}"
  remote_user: pi
  vars:
    ansible_ssh_pass: raspberry
    ansible_become_pass: raspberry

- name: set server user authorized ssh key
  when: pi_user_exists.rc == 0
  copy: src=authorized_keys dest=/home/{{ server_user }}/.ssh/
  remote_user: pi
  become_user: "{{ server_user }}"
  vars:
    ansible_ssh_pass: raspberry
    ansible_become_pass: raspberry

- name: kill pi user processes
  command: pkill -u pi
  register: pkill_out
  changed_when: pkill_out.rc == 0
  ignore_errors: true

- name: remove pi user
  user: name=pi state=absent

# needed if authorized keys need to be changed after initial user setup
- name: update authorized ssh keys
  copy: src=authorized_keys dest=/home/{{ server_user }}/.ssh/

- name: ensure ntfs-3g is there for mounts
  apt:
    update_cache: yes
    cache_valid_time: 3600
    name: ntfs-3g
    state: latest

- name: mount drive for backups
  mount:
    name: /data
    src: 'UUID=3248F2D948F29AB5'
    fstype: ntfs-3g
    opts: rw,user,auto,fmask=0117,dmask=0007,gid=sudo
    state: mounted

- name: install hdparm
  apt: name=hdparm state=latest

- name: set disk spindown
  # 12 * 5 = 60 seconds
  command: hdparm -S 12 /dev/disk/by-uuid/3248F2D948F29AB5

- name: install rsync
  apt: name=rsync state=latest

