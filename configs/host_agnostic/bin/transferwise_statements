#!/usr/bin/env python3

# TODO
# - put in dropbox
# - cron
from datetime import datetime
import itertools
import shlex
import subprocess
import sys
from typing import List, Tuple
from pathlib import Path

import pytz
import requests

token = None

CURRENT_YEAR = 2021

# TODO I'm getting 403


def main():
    global token
    token = Path('~/.credentials/transferwise_token').expanduser().read_text().strip()
    statements_month = int(sys.argv[1])

    start_time, end_time = get_month_ends(statements_month)
    profile_id = get_profile_id()
    account_id = get_account_id(profile_id)

    statemets_url_template = ('https://api.transferwise.com/v3/profiles/{profile_id}/borderless-accounts/'
                              '{account_id}/statement.{file_format}?'
                              'currency={currency}&intervalStart={start_time}&intervalEnd={end_time}')

    for file_format, currency in itertools.product(['csv', 'pdf'], ['GBP', 'USD']):
        statemets_url = statemets_url_template.format(
            profile_id=profile_id,
            account_id=account_id,
            file_format=file_format,
            currency=currency,
            start_time=start_time,
            end_time=end_time,
        )
        print('Will request:\n', statemets_url)
        subprocess.run(shlex.split(
            f'wget --header="Authorization: Bearer {token}" --content-disposition {statemets_url}'
        ))
    print('\nPulled all statements.')


def get_profile_id() -> int:
    resp = requests.get(
        'https://api.transferwise.com/v1/profiles',
        headers={'Authorization': f'Bearer {token}'},
    )
    resp.raise_for_status()

    profiles: List[dict] = resp.json()
    business_profile = next(profile for profile in profiles if profile['type'] == 'business')
    return business_profile['id']


def get_account_id(profile_id: int) -> int:
    resp = requests.get(
        f'https://api.transferwise.com/v1/borderless-accounts?profileId={profile_id}',
        headers={'Authorization': f'Bearer {token}'},
    )
    resp.raise_for_status()

    accounts: List[dict] = resp.json()
    business_account = accounts[0]
    return business_account['id']


def get_month_ends(month: int) -> Tuple[str, str]:
    def to_utc_string(date: datetime) -> str:
        as_utc = date.astimezone(pytz.utc)
        return as_utc.isoformat().replace('+00:00', 'Z')

    gb_timezone = pytz.timezone('Europe/London')
    start_date = gb_timezone.localize(datetime(year=CURRENT_YEAR, month=month, day=1))

    is_last_year_month = month == 12
    if not is_last_year_month:
        end_year, end_month = CURRENT_YEAR, month+1
    else:
        end_year, end_month = CURRENT_YEAR+1, 1

    end_date = gb_timezone.localize(datetime(year=end_year, month=end_month, day=1))
    return to_utc_string(start_date), to_utc_string(end_date)


if __name__ == '__main__':
    main()
